
from typing import Literal
from fasttk import *

# == NOTE The following part is generated by GPT 4.1 ==

def _hsv_to_rgb(h, s, v):
    """
    将HSV颜色值转换为RGB颜色值
    参数:
        h: 色调(Hue)，范围0-360度
        s: 饱和度(Saturation)，范围0-1
        v: 明度(Value)，范围0-1
    返回:
        (r, g, b): RGB颜色值，范围0-255的整数元组
    """
    if s == 0.0:
        r = g = b = int(v * 255)
        return r, g, b

    h = h % 360
    h_sector = h / 60
    i = int(h_sector)
    f = h_sector - i
    p = v * (1 - s)
    q = v * (1 - s * f)
    t = v * (1 - s * (1 - f))

    if i == 0:
        r, g, b = v, t, p
    elif i == 1:
        r, g, b = q, v, p
    elif i == 2:
        r, g, b = p, v, t
    elif i == 3:
        r, g, b = p, q, v
    elif i == 4:
        r, g, b = t, p, v
    else:  # i == 5
        r, g, b = v, p, q

    return int(r * 255), int(g * 255), int(b * 255)

def _rgb_to_hsv(r, g, b):
    """
    将RGB颜色值转换为HSV颜色值
    参数:
        r, g, b: RGB颜色值，范围0-255的整数
    返回:
        (h, s, v): HSV颜色值，
                   h范围0-360度，
                   s和v范围0-1
    """
    r_norm = r / 255.0
    g_norm = g / 255.0
    b_norm = b / 255.0

    c_max = max(r_norm, g_norm, b_norm)
    c_min = min(r_norm, g_norm, b_norm)
    delta = c_max - c_min

    # 计算色调h
    if delta == 0:
        h = 0
    elif c_max == r_norm:
        h = 60 * (((g_norm - b_norm) / delta) % 6)
    elif c_max == g_norm:
        h = 60 * (((b_norm - r_norm) / delta) + 2)
    else:  # c_max == b_norm
        h = 60 * (((r_norm - g_norm) / delta) + 4)

    # 计算饱和度s
    s = 0 if c_max == 0 else delta / c_max

    # 计算明度v
    v = c_max

    return h, s, v

def _rgb_to_hex(r, g, b):
    """
    将RGB颜色值转换为HEX字符串。
    
    参数:
        r (int): 红色分量，范围0-255
        g (int): 绿色分量，范围0-255
        b (int): 蓝色分量，范围0-255
    
    返回:
        str: 以#开头的HEX颜色字符串，如#1A2B3C
    """
    if not (0 <= r <= 255 and 0 <= g <= 255 and 0 <= b <= 255):
        raise ValueError("RGB值必须在0到255之间")
    return "#{:02X}{:02X}{:02X}".format(r, g, b)

def _hex_to_rgb(hex_str):
    """
    将HEX颜色字符串转换为RGB颜色值。
    
    参数:
        hex_str (str): 以#开头的HEX颜色字符串，如#1A2B3C，支持3位和6位格式
    
    返回:
        tuple: (r, g, b)，分别为0-255的整数
    """
    hex_str = hex_str.lstrip('#')
    if len(hex_str) == 3:
        # 支持简写格式，如 #abc -> #aabbcc
        hex_str = ''.join([c*2 for c in hex_str])
    if len(hex_str) != 6:
        raise ValueError("HEX颜色字符串格式错误")
    r = int(hex_str[0:2], 16)
    g = int(hex_str[2:4], 16)
    b = int(hex_str[4:6], 16)
    return (r, g, b)

def _color_adjust(base: "ColorValue", dS: float, dV: float) -> "ColorValue":
    def calc(x, d):
        return x * (d + 1) if d <= 0 else x + (1 - x) * d

    copy = ColorValue(base.rgb)
    h, s, v = copy.hsv
    copy.hsv = (h, calc(s, dS), calc(v, dV))

    return copy

class ColorValue:
    """
    支持HSV、RGB、HEX互转的颜色值类，属性可读写。
    """

    def __init__(self, value):
        if isinstance(value, str):
            self._r, self._g, self._b = _hex_to_rgb(value)
        elif isinstance(value, tuple) and len(value) == 3:
            self._r, self._g, self._b = value
        else:
            raise ValueError("输入值必须是HEX字符串或RGB元组")
        self._sync_hsv()

    def _sync_hsv(self):
        self._h, self._s, self._v = _rgb_to_hsv(self._r, self._g, self._b)

    def _sync_rgb(self):
        self._r, self._g, self._b = _hsv_to_rgb(self._h, self._s, self._v)

    @property
    def rgb(self):
        return (self._r, self._g, self._b)

    @rgb.setter
    def rgb(self, value):
        if not (isinstance(value, tuple) and len(value) == 3):
            raise ValueError("RGB值必须是长度为3的元组")
        self._r, self._g, self._b = value
        self._sync_hsv()

    @property
    def hsv(self):
        return (self._h, self._s, self._v)

    @hsv.setter
    def hsv(self, value):
        if not (isinstance(value, tuple) and len(value) == 3):
            raise ValueError("HSV值必须是长度为3的元组")
        self._h, self._s, self._v = value
        self._sync_rgb()

    @property
    def hex(self):
        return _rgb_to_hex(self._r, self._g, self._b)

    @hex.setter
    def hex(self, value):
        self._r, self._g, self._b = _hex_to_rgb(value)
        self._sync_hsv()

# == NOTE LLM generated part ends ==

class PureColorTheme:

    _dark1: ColorValue
    _dark0: ColorValue
    _light1: ColorValue
    _light0: ColorValue
    _base: ColorValue

    _shadow_map = [
        {"ds": -0.5, "dv": -0.5},
        {"ds": 1, "dv": -0.7},
    ]
    _light_map = [
        {"ds": -0.5, "dv": 1},
        {"ds": -0.9, "dv": 1}
    ]

    def __init__(
        self,
        tag: str,
        rgb_or_hex: tuple[int, int, int] | str,
        default_size: int = 5,
        cs: float = 0.5,
        cl: float = 0.5
    ):
        self._base = ColorValue(rgb_or_hex)
        self._dark0 = _color_adjust(self._base, self._shadow_map[0]["ds"] * cs, self._shadow_map[0]["dv"] * cs)
        self._dark1 = _color_adjust(self._base, self._shadow_map[1]["ds"] * cs, self._shadow_map[1]["dv"] * cs)
        self._light0 = _color_adjust(self._base, self._light_map[0]["ds"] * cl, self._light_map[0]["dv"] *cl)
        self._light1 = _color_adjust(self._base, self._light_map[1]["ds"] * cl, self._light_map[1]["dv"] *cl)

        self.hex_l0 = self._light0.hex
        self.hex_l1 = self._light1.hex
        self.hex_d0 = self._dark0.hex
        self.hex_d1 = self._dark1.hex
        self.hex_ba = self._base.hex
        self.tag = f".{tag}" if tag else ""
        self.size = default_size


    def on(
        self,
        *tags: Literal[
            "button", "text", "checkbutton", "entry", "combobox", "label",
            "frame", "treeview", "scrollbar"
        ]
    ) -> list[Style]:
        use = []
        for tag in tags:
            if method := getattr(self, tag, None):
                use.extend(method())
        return use

    def text(self):
        return [{
            "_selector": "text" + self.tag,
            
            "background": "white",
            "foreground": self.hex_ba,
            "text_height": self.size * 2,
            "font": "Consolas",
            "font_size": self.size * 4,
            "text_width": self.size * 8,
            "select_background": self.hex_d0,
            "select_foreground": self.hex_l1,
            "insert_color": self.hex_ba,
            "insert_width": self.size,
            "text_wrap": "word",
            "border_style": "flat"
        }]

    def button(self) -> list[Style]:
        selector = "button" + self.tag
        return [
            {
                "_selector": selector,

                "foreground": self.hex_ba,
                "background": "white",
                "border_style": "solid",
                "border_color": self.hex_ba,

                "font": "Consolas",
                
            },
            {
                "_selector": selector,
                "_states": ("pressed", "!disabled"),

                "background": self.hex_d0,
                "foreground": "light gray"
            },
            {
                "_selector": selector,
                "_states": ("active", "!disabled"),
                
                "background": self.hex_ba,
                "foreground": "white"
            },
            {
                "_selector": selector,
                "_states": "disabled",

                "foreground": self.hex_d0,
                "background": "light gray",
                "border_color": self.hex_d0
            }
        ]

    def checkbutton(self) -> list[Style]:
        selector = "checkbutton" + self.tag
        return [
            {
                "_selector": selector,

                "foreground": "black",
                "background": "alice blue",
                
                "font": "Consolas",
                "border_style": "flat",
                "light_color": self.hex_d0,
                "dark_color": self.hex_d0,
                "indicator_background": "white",
                "indicator_foreground": self.hex_ba,
                "indicator_size": self.size * 2,
                "indicator_margin_right": self.size * 2,
                "padding": (0, self.size * 2)
            },
            {
                "_selector": selector,
                "_states": ("active", "selected"),

                "foreground": self.hex_ba
            },
            {
                "_selector": selector,
                "_states": ("selected", "!disabled"),

                "foreground": self.hex_ba,
                "indicator_background": self.hex_ba,
            },
            {
                "_selector": selector,
                "_states": ("disabled", "!selected"),

                "foreground": "gray",
                "light_color": "gray",
                "dark_color": "gray"
            },
            {
                "_selector": selector,
                "_states": ("disabled", "selected"),

                "foreground": "gray",
                "light_color": "black",
                "dark_color": "black",
                "indicator_foreground": "gray",
                "indicator_background": "gray"
            }
        ]

    def entry(self) -> list[Style]:
        selector = "entry" + self.tag
        return [
            {
                "_selector": selector,
                
                "input_width": self.size * 3,

                "font": "Consolas",
                "font_size": self.size * 5,
                "select_foreground": self.hex_l1,
                "select_background": self.hex_d0,
                "insert_color": self.hex_d1,
                "insert_width": self.size,
                "foreground": self.hex_ba,
                "border_color": self.hex_d0
            },
            {
                "_selector": selector,
                "_states": ("!disabled", "focus"),

                "light_color": self.hex_ba,
                "dark_color": self.hex_ba,
            },
            {
                "_selector": selector,
                "_states": "disabled",

                "light_color": "white",
                "dark_color": "white",
                "foreground": "gray",
                "border_color": "gray"
            }
        ]

    def combobox(self) -> list[Style]:
        selector = "combobox" + self.tag
        return [
            {
                "_selector": selector,
                "font": "Consolas",
                "font_size": self.size * 5,
                "indicator_size": self.size * 4,
                "foreground": self.hex_ba,
                "background": "white",
                "select_foreground": "white",
                "select_background": self.hex_l1,
                "indicator_background": self.hex_ba,
                "indicator_foreground": "white",
                "border_color": self.hex_ba,
                "light_color": self.hex_ba,
                "dark_color": self.hex_ba,
                "insert_width": self.size,
                "insert_color": self.hex_ba
            },
            {
                "_selector": selector,
                "_states": ("pressed", "!disabled", "!readonly"),
                
                "indicator_foreground": "white",
                "indicator_background": self.hex_d0,
            },
            {
                "_selector": selector,
                "_states": ("pressed", "!disabled", "readonly"),
                
                "indicator_foreground": "white",
                "indicator_background": self.hex_d0,
                "select_background": "white",
                "select_foreground": self.hex_ba
            },
            {
                "_selector": selector,
                "_states": ("active", "!disabled"),

                "indicator_background": self.hex_l0
            },
            {
                "_selector": selector,
                "_states": "disabled",

                "indicator_background": "gray",
                "light_color": "gray",
                "dark_color": "gray",
                "border_color": "gray"
            },
            {
                "_selector": selector,
                "_states": ("readonly", "!pressed", "!disabled"),

                "select_background": "white",
                "select_foreground": self.hex_ba
            }
        ]

    def label(self) -> list[Style]:
        return [
            {
                "_selector": "label" + self.tag,
                "background": self.hex_l1,
                "font": "Consolas",
                "font_size": self.size * 4,
                "foreground": self.hex_ba
            }
        ]

    def frame(self) -> list[Style]:
        return [{
            "_selector": "frame" + self.tag,

            "background": self.hex_l1,
            "border_color": self.hex_d0,
            "border_style": "solid"
        }]

    def treeview(self) -> list[Style]:
        selector = "treeview" + self.tag
        return [
            {
                "_selector": selector,
                "border_color": self.hex_d1,
                "heading_border_color": self.hex_d0,
                "heading_border_style": "solid",
                "light_color": self.hex_d0,
                "dark_color": self.hex_d0,
                "field_background": self.hex_l1,
                "heading_background": self.hex_l0,
                "heading_foreground": self.hex_d1,
                "foreground": self.hex_ba,
                "background": self.hex_l1,

                "font": "Consolas",
                "font_size": self.size * 4,
                "treeview_row_height": self.size * 6,
                "heading_font": "Consolas",
                "heading_font_size": self.size * 5,
            },
            {
                "_selector": selector,
                "_states": ("active", "!disabled"),

                "heading_background": self.hex_l1
            },
            {
                "_selector": selector,
                "_states": ("selected", "!disabled"),

                "foreground": self.hex_l1,
                "background": self.hex_ba
            }
        ]

    def scrollbar(self) -> list[Style]:
        selector = "scrollbar" + self.tag
        return [
            {
                "_selector": selector,

                "background": self.hex_l1,
                "foreground": self.hex_l1,
                "light_color": self.hex_d1,
                "dark_color": self.hex_d1,
                "border_color": self.hex_l1,
                "indicator_foreground": self.hex_d1
            },
            {
                "_selector": selector,
                "_states": ("active", "!disabled"),

                "foreground": self.hex_ba,
                "indicator_background": self.hex_ba
            },
            {
                "_selector": selector,
                "_states": "disabled",

                "light_color": self.hex_l1,
                "dark_color": self.hex_l1,
            }
        ]
